const { Builder } = require("selenium-webdriver");
const chrome = require("selenium-webdriver/chrome");
const fs = require("node:fs");
const os = require("os");
const path = require("path");

(async function openYouTube() {
    const options = new chrome.Options();
    if (os.platform() !== "win32") {
        options.setChromeBinaryPath("/usr/bin/chromium");
    }

    // Create a unique temp directory for user data
    const userDataDir = fs.mkdtempSync(
        path.join(os.tmpdir(), "chrome-user-data-")
    );
    options.addArguments(`--user-data-dir=${userDataDir}`);

    options.addArguments("--disable-gpu", "--headless=new");
    options.addArguments(
        "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.7151.69 Safari/537.36"
    );

    let driver = await new Builder()
        .forBrowser("chrome")
        .setChromeOptions(options)
        .build();
    try {
        await driver.get("https://www.youtube.com");
        // Wait for the Sign in anchor element to appear
        const signInSelector =
            'a.yt-spec-button-shape-next[aria-label="Sign in"]';
        const { until, By } = require("selenium-webdriver");
        await driver.wait(until.elementLocated(By.css(signInSelector)), 10000);
        const signInButton = await driver.findElement(By.css(signInSelector));
        await signInButton.click();
        // Wait for the email input element to appear and input text
        const emailInputSelector = "input#identifierId";
        await driver.wait(
            until.elementLocated(By.css(emailInputSelector)),
            10000
        );

        const emailInput = await driver.findElement(By.css(emailInputSelector));
        console.log(process.env.DOUBLESHARP_EMAIL);
        await emailInput.sendKeys(process.env.DOUBLESHARP_EMAIL);
        // Take a screenshot after entering the email for debugging
        await driver
            .takeScreenshot()
            .then((data) =>
                fs.writeFileSync("debug_after_email.png", data, "base64")
            );
        // Wait for the next button to appear and be enabled, then click it
        const nextButtonSelector = "div#identifierNext";
        const nextButton = await driver.findElement(By.css(nextButtonSelector));
        await driver.wait(until.elementIsVisible(nextButton), 10000);
        await driver.wait(until.elementIsEnabled(nextButton), 10000);
        // Extra: scroll into view and pause briefly
        await driver.executeScript(
            "arguments[0].scrollIntoView(true);",
            nextButton
        );
        await driver.sleep(500);
        try {
            await nextButton.click();
        } catch (e) {
            await driver
                .takeScreenshot()
                .then((data) =>
                    fs.writeFileSync(
                        "debug_next_button_error.png",
                        data,
                        "base64"
                    )
                );
            throw e;
        }
        // Wait for the password input element to appear and input password
        const passwordInputSelector = 'input[name="Passwd"]';
        await driver.wait(
            until.elementLocated(By.css(passwordInputSelector)),
            10000
        );
        const passwordInput = await driver.findElement(
            By.css(passwordInputSelector)
        );
        await passwordInput.sendKeys(process.env.DOUBLESHARP_PASSWORD);
        // Wait for the password next button to appear and be enabled, then click it
        const passwordNextSelector = "div#passwordNext";
        await driver.wait(async () => {
            const el = await driver.findElement(By.css(passwordNextSelector));
            return await el.isEnabled();
        }, 10000);
        const passwordNextButton = await driver.findElement(
            By.css(passwordNextSelector)
        );
        await passwordNextButton.click();

        // Wait for the page to redirect back to YouTube
        await driver.wait(async () => {
            const url = await driver.getCurrentUrl();
            return url.startsWith("https://www.youtube.com/");
        }, 15000);

        const cookies = await driver.manage().getCookies();
        const cookiesTxt = toCookiesTxt(cookies);
        // Write cookies.txt to the out directory
        fs.writeFileSync("cookies.txt", cookiesTxt, "utf8");
        console.log("cookies.txt file written successfully.");
    } finally {
        // Do not quit the driver, so the browser window stays open
        await driver.quit();
    }
})();

// Transform cookies to cookies.txt (Netscape) format
function toCookiesTxt(cookies) {
    // Netscape format header
    let lines = [
        "# Netscape HTTP Cookie File",
        "# This file was generated by Selenium",
        "#",
        "# http://www.netscape.com/newsref/std/cookie_spec.html",
        "# This is a generated file!  Do not edit.",
        "",
    ];
    for (const c of cookies) {
        // domain, include initial dot if cookie is valid for subdomains
        let domain = c.domain.startsWith(".") ? c.domain : "." + c.domain;
        // flag: TRUE if cookie is valid for subdomains, else FALSE
        let flag = c.domain.startsWith(".") ? "TRUE" : "FALSE";
        // path
        let path = c.path;
        // secure
        let secure = c.secure ? "TRUE" : "FALSE";
        // expiration (in seconds since epoch), or 0 if session
        let expiry = c.expiry ? c.expiry : 0;
        // name and value
        let name = c.name;
        let value = c.value;
        lines.push(
            [domain, flag, path, secure, expiry, name, value].join("\t")
        );
    }
    return lines.join("\n");
}
